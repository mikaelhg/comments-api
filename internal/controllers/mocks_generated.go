// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mikaelhg/comments-api/internal/controllers (interfaces: CommentController)
//
// Generated by this command:
//
//	mockgen -package=controllers -destination=mocks_generated.go . CommentController
//
// Package controllers is a generated GoMock package.
package controllers

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockCommentController is a mock of CommentController interface.
type MockCommentController struct {
	ctrl     *gomock.Controller
	recorder *MockCommentControllerMockRecorder
}

// MockCommentControllerMockRecorder is the mock recorder for MockCommentController.
type MockCommentControllerMockRecorder struct {
	mock *MockCommentController
}

// NewMockCommentController creates a new mock instance.
func NewMockCommentController(ctrl *gomock.Controller) *MockCommentController {
	mock := &MockCommentController{ctrl: ctrl}
	mock.recorder = &MockCommentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentController) EXPECT() *MockCommentControllerMockRecorder {
	return m.recorder
}

// GetComment mocks base method.
func (m *MockCommentController) GetComment(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentControllerMockRecorder) GetComment(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentController)(nil).GetComment), arg0)
}
